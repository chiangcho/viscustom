{"version":3,"sources":["components/G6/index.tsx","utils/path.ts","pages/RelationGraph.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["graph","nodes","initialNodes","map","node","id","custNo","name","style","fill","edges","initialEdges","edge","source","sourceNo","target","targetNo","edgeList","onNodeClick","e","item","_cfg","model","findById","selected","weight","from","to","callback","forEach","undefined","Set","add","pathStack","sideStack","Array","length","nodeList","pop","push","temp","filter","find","n","findPaths","max","key","gray","Math","round","update","label","getNodes","nodeId","showItem","hideItem","ref","React","useRef","useEffect","G6","Graph","container","ReactDOM","findDOMNode","current","width","height","modes","default","layout","type","preventOverlap","linkDistance","nodeSize","defaultNode","labelCfg","fontSize","size","stroke","on","data","render","overflow","App","className","RelationGraph","Boolean","window","location","hostname","match","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.24155995.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport G6 from '@antv/g6'\nimport initialEdges from './edges.json'\nimport initialNodes from './nodes.json'\nimport { findPaths } from '../../utils/path'\n\nlet graph: any = null\n\nconst centerId = '2500631037'\n\nconst nodes = initialNodes.map((node) => ({\n  id: node.custNo,\n  name: node.name,\n  style: {\n    fill: node.custNo === centerId ? '#FF00FF' : '#00FFFF',\n  },\n}))\n\nconst edges = initialEdges.map((edge) => ({\n  source: edge.sourceNo,\n  target: edge.targetNo,\n}))\n\nconst edgeList = initialEdges.map((edge) => ({\n  source: edge.targetNo,\n  target: edge.sourceNo,\n}))\n\nexport default function () {\n  const onNodeClick = (e: any) => {\n    const id = e.item._cfg.id\n    if (id === centerId) return\n\n    const model = graph.findById(id)\n\n    const { selected } = model._cfg.model\n\n    const weight = findPaths(edgeList, centerId, id, (path: String[]) => {})\n\n    let max = 0.0\n\n    for (const key in weight) if (weight[key] > max) max = weight[key]\n\n    for (const key in weight) {\n      if (key === centerId || key === id) continue\n      const gray = Math.round(255 * (1 - weight[key] / max))\n      graph.update(key, {\n        style: {\n          fill: selected ? '#00FFFF' : `rgb(${gray},${gray},${gray})`,\n        },\n        label: selected ? '' : weight[key],\n      })\n    }\n\n    graph.getNodes().forEach((node: any) => {\n      const nodeId = node._cfg.id\n\n      if (nodeId !== centerId && nodeId !== id && !weight[nodeId]) {\n        selected ? graph.showItem(nodeId) : graph.hideItem(nodeId)\n      }\n    })\n\n    graph.update(model, {\n      ...model,\n      style: {\n        fill: selected ? '#00FFFF' : '#FF3322',\n      },\n      selected: !selected,\n    })\n  }\n\n  const ref = React.useRef(null)\n\n  useEffect(() => {\n    graph = new G6.Graph({\n      container: ReactDOM.findDOMNode(ref.current) as HTMLElement,\n      width: 1100,\n      height: 800,\n      modes: {\n        default: ['drag-canvas', 'zoom-canvas'], // 允许拖拽画布、放缩画布、拖拽节点\n      },\n      layout: {\n        type: 'force',\n        preventOverlap: true,\n        linkDistance: 80,\n        nodeSize: 20,\n      },\n      defaultNode: {\n        type: 'node',\n        labelCfg: {\n          style: {\n            fill: '#000000A6',\n            fontSize: 10,\n          },\n        },\n        size: 10,\n        style: {\n          fill: '#00FFFF',\n          stroke: '#002222',\n        },\n      },\n    })\n    graph.on('node:click', onNodeClick)\n    graph.data({ nodes, edges })\n    graph.render()\n  }, [])\n\n  return <div ref={ref} style={{ overflow: 'auto' }} />\n}\n","interface Edge {\n  source: string\n  target: string\n}\n\ninterface EdgeList {\n  [key: string]: Set<string>\n}\n\nfunction findPath(\n  edgeList: EdgeList,\n  from: string,\n  to: string,\n  callback: any,\n  path: String[],\n  depth: number = 0\n) {\n  if (path.find((node) => node === from) || depth > 8) return\n\n  if (edgeList[from]) {\n    path.push(from)\n    for (const target of edgeList[from]) {\n      if (target === to) {\n        path.push(target)\n        callback(path)\n        path.pop()\n        break\n      } else findPath(edgeList, target, to, callback, path, depth + 1)\n    }\n  }\n\n  if (path.length > 0) path.pop()\n}\n\nexport function _findPath(\n  edges: Edge[],\n  from: string,\n  to: string,\n  callback: any = (path?: String[]) => {},\n  path: String[] = [],\n  depth: number = 0\n) {\n  // 遍历过程中存在环，直接结束本次遍历过程\n  if (path.find((node) => node === from) || depth > 8) {\n    path.pop()\n    return\n  }\n\n  for (const edge of edges) {\n    let { source, target } = edge\n\n    if (source !== from) {\n      let temp = source\n      source = target\n      target = temp\n    }\n\n    if (source === from) {\n      debugger\n      path.push(from)\n      if (target === to) {\n        path.push(to)\n        callback(path)\n        path.pop()\n        path.pop()\n        continue\n      }\n      _findPath(edges, target, to, callback, path, depth + 1)\n    }\n  }\n  if (path.length > 0) path.pop()\n}\n\nexport function findPaths(\n  edges: Edge[],\n  from: string,\n  to: string,\n  callback: any\n) {\n  //初始化邻接集合\n  const edgeList: EdgeList = {}\n\n  edges.forEach(({ source, target }) => {\n    if (edgeList[source] === undefined) edgeList[source] = new Set()\n    if (edgeList[target] === undefined) edgeList[target] = new Set()\n    edgeList[source].add(target)\n    edgeList[target].add(source)\n  })\n\n  const pathStack = [from]\n  const sideStack = [Array.from(edgeList[from])]\n  const weight: {\n    [key: string]: number\n  } = {}\n\n  // debugger\n\n  while (pathStack.length > 0) {\n    let nodeList = sideStack.pop() || []\n    if (nodeList.length > 0) {\n      let node = nodeList.pop() as string\n      pathStack.push(node)\n      sideStack.push(nodeList)\n      if (edgeList[node]) {\n        let temp = edgeList[node]\n\n        let item = Array.from(temp).filter(\n          (target) => !pathStack.find((n) => n === target)\n        )\n        sideStack.push(item)\n      }\n    } else pathStack.pop()\n\n    if (pathStack.length > 0 && pathStack[pathStack.length - 1] === to) {\n      // debugger\n\n      pathStack.forEach((n) => {\n        if (weight[n] === undefined) weight[n] = 0\n        weight[n]++\n      })\n      // callback(Array.from(pathStack))\n      pathStack.pop()\n      sideStack.pop()\n    }\n  }\n\n  return weight\n}\n","import React, { useState } from 'react'\nimport G6 from '../components/G6'\n\nfunction getEdges(nodeId: String, edges: any[]) {\n  return edges.filter((edge) => edge.source === nodeId)\n}\n\nexport default function () {\n  return (\n    <div style={{ width: '100%', height: '100%' }}>\n      <G6 />\n    </div>\n  )\n}\n","import React from 'react'\nimport RelationGraph from './pages/RelationGraph'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RelationGraph />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}