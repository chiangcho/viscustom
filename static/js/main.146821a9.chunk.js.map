{"version":3,"sources":["components/G6/index.tsx","pages/RelationGraph.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["graph","nodes","initialNodes","map","node","id","custNo","name","style","fill","edges","initialEdges","edge","source","sourceNo","target","targetNo","edgeList","path","findRoutes","start","end","callback","inPath","pop","push","length","ref","React","useRef","onNodeClick","e","item","_cfg","model","findById","selected","index","console","log","update","label","useEffect","G6","Graph","container","ReactDOM","findDOMNode","current","width","height","modes","default","layout","type","preventOverlap","linkDistance","nodeSize","defaultNode","labelCfg","fontSize","size","stroke","on","data","render","overflow","App","className","RelationGraph","Boolean","window","location","hostname","match","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"ir0zCAMIA,EAAa,KAEXC,EAAQC,EAAaC,KAAI,SAACC,GAAD,MAAW,CACxCC,GAAID,EAAKE,OACTC,KAAMH,EAAKG,KACXC,MAAO,CACLC,KAAsB,eAAhBL,EAAKE,OAA0B,UAAY,eAI/CI,EAAQC,EAAaR,KAAI,SAACS,GAAD,MAAW,CACxCC,OAAQD,EAAKE,SACbC,OAAQH,EAAKI,aAQTC,EAAWN,EAAaR,KAAI,SAACS,GAAD,MAAW,CAC3CC,OAAQD,EAAKE,SACbC,OAAQH,EAAKI,aAGXE,EAAsB,GAS1B,SAASC,EACPF,EACAG,EACAC,EACAC,GAGA,GAdF,SAAgBJ,EAAqBd,GAAwB,IAAD,gBAC5Cc,GAD4C,IAC1D,4BAAoB,GAApB,SAA6Bd,EAAM,OAAO,GADgB,8BAG1D,OAAO,EAWHmB,CAAOL,EAAME,GAGfF,EAAKM,UAHP,CAFA,oBAQcP,GARd,IAQA,2BAAwB,CAAC,IACnBL,EADkB,QAEtB,GAAIA,EAAKC,QAAUO,EAAO,CAExB,GADAF,EAAKO,KAAKL,GACNR,EAAKG,QAAUM,EAAK,CACtBH,EAAKO,KAAKJ,GACVC,EAASJ,GAETA,EAAKM,MACLN,EAAKM,MACL,SAEFL,EAAWF,EAAUL,EAAKG,OAAQM,EAAKC,KApB3C,8BAwBIJ,EAAKQ,OAAS,GAEhBR,EAAKM,OAIM,iBACb,IAAMG,EAAMC,IAAMC,OAAO,MAEnBC,EAAc,SAACC,GACnB,IAAM1B,EAAK0B,EAAEC,KAAKC,KAAK5B,GACvB,GAAW,eAAPA,EAAJ,CAGA,IAAM6B,EAAQlC,EAAMmC,SAAS9B,GAErB+B,EAAaF,EAAMD,KAAKC,MAAxBE,SAERlB,EAAO,GACPC,EAAWF,EAAU,aAAcZ,GAAI,SAACa,GACtC,IAAK,IAAImB,EAAQ,EAAGA,EAAQnB,EAAKQ,OAAS,EAAGW,IAAS,CACpD,IAAMH,EAAQlC,EAAMmC,SAASjB,EAAKmB,IAElCC,QAAQC,IAAIrB,GAEZlB,EAAMwC,OAAON,EAAb,eACKA,EADL,CAGEO,MAAOL,EAAW,GAAKlB,EAAKmB,GAC5B7B,MAAO,CACLC,KAAM2B,EAAW,UAAY,kBAMrCpC,EAAMwC,OAAON,EAAb,eACKA,EADL,CAEE1B,MAAO,CACLC,KAAM2B,EAAW,UAA4B,IAAhBlB,EAAKQ,OAAe,UAAY,WAE/DU,UAAWA,OA2Cf,OAvCAM,qBAAU,WACH1C,KACHA,EAAQ,IAAI2C,IAAGC,MAAM,CACnBC,UAAWC,IAASC,YAAYpB,EAAIqB,SACpCC,MAAO,KACPC,OAAQ,IACRC,MAAO,CACLC,QAAS,CAAC,cAAe,gBAE3BC,OAAQ,CACNC,KAAM,QACNC,gBAAgB,EAChBC,aAAc,GACdC,SAAU,IAEZC,YAAa,CACXJ,KAAM,OACNK,SAAU,CACRnD,MAAO,CACLC,KAAM,YACNmD,SAAU,KAGdC,KAAM,GACNrD,MAAO,CACLC,KAAM,UACNqD,OAAQ,eAKRC,GAAG,aAAcjC,GAEvB9B,EAAMgE,KAAK,CAAE/D,QAAOS,WAGtBV,EAAMiE,YAGD,yBAAKtC,IAAKA,EAAKnB,MAAO,CAAE0D,SAAU,WClJ5B,iBACb,OACE,yBAAK1D,MAAO,CAAEyC,MAAO,OAAQC,OAAQ,SACnC,kBAACP,EAAD,Q,MCESwB,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN5B,IAASmB,OACP,kBAAC,IAAMU,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.146821a9.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport G6 from '@antv/g6'\nimport initialEdges from './edges.json'\nimport initialNodes from './nodes.json'\n\nlet graph: any = null\n\nconst nodes = initialNodes.map((node) => ({\n  id: node.custNo,\n  name: node.name,\n  style: {\n    fill: node.custNo === '2500631037' ? '#FF00FF' : '#00FFFF',\n  },\n}))\n\nconst edges = initialEdges.map((edge) => ({\n  source: edge.sourceNo,\n  target: edge.targetNo,\n}))\n\ninterface edge {\n  source: string // 起始节点\n  target: string // 目标节点\n}\n\nconst edgeList = initialEdges.map((edge) => ({\n  source: edge.sourceNo,\n  target: edge.targetNo,\n}))\n\nlet path: Array<string> = []\n// 检测当前节点是否存在于当前路径中（用来判断是否遇到了一个环）\nfunction inPath(path: Array<string>, node: string): boolean {\n  for (let v of path) if (v == node) return true\n\n  return false\n}\n\n// 寻找从start到end的所有路径 每找到一条就打印出来\nfunction findRoutes(\n  edgeList: Array<edge>,\n  start: string,\n  end: string,\n  callback: (path: Array<string>) => any\n) {\n  // console.log(\"边集:\", edgeList)\n  if (inPath(path, start)) {\n    // console.log(\"找到了一个环:\", path)\n    // 当遇到环时 回退一个节点\n    path.pop()\n    return\n  }\n  for (let v of edgeList) {\n    var edge = v\n    if (edge.source == start) {\n      path.push(start)\n      if (edge.target == end) {\n        path.push(end)\n        callback(path)\n        // 因为添加了结束节点，所以这里要多pop一次\n        path.pop()\n        path.pop()\n        continue\n      }\n      findRoutes(edgeList, edge.target, end, callback)\n    }\n  }\n  // 没找到下一个节点（到了一个没有出度的节点）\n  if (path.length > 0) {\n    // 回退一个节点\n    path.pop()\n  }\n}\n\nexport default function () {\n  const ref = React.useRef(null)\n\n  const onNodeClick = (e: any) => {\n    const id = e.item._cfg.id\n    if (id === '2500631037') return\n    // const model = graph.findById(id)\n\n    const model = graph.findById(id)\n\n    const { selected } = model._cfg.model\n\n    path = []\n    findRoutes(edgeList, '2500631037', id, (path: any) => {\n      for (let index = 1; index < path.length - 1; index++) {\n        const model = graph.findById(path[index])\n        // let {degree,name}=model._cfg.model\n        console.log(path)\n\n        graph.update(model, {\n          ...model,\n          // degree:!degree,\n          label: selected ? '' : path[index],\n          style: {\n            fill: selected ? '#00FFFF' : '#112233',\n          },\n        })\n      }\n    })\n\n    graph.update(model, {\n      ...model,\n      style: {\n        fill: selected ? '#00FFFF' : path.length === 0 ? '#222222' : '#FF3388',\n      },\n      selected: !selected,\n    })\n  }\n\n  useEffect(() => {\n    if (!graph) {\n      graph = new G6.Graph({\n        container: ReactDOM.findDOMNode(ref.current) as HTMLElement,\n        width: 1200,\n        height: 800,\n        modes: {\n          default: ['drag-canvas', 'zoom-canvas'], // 允许拖拽画布、放缩画布、拖拽节点\n        },\n        layout: {\n          type: 'force',\n          preventOverlap: true,\n          linkDistance: 80,\n          nodeSize: 20,\n        },\n        defaultNode: {\n          type: 'node',\n          labelCfg: {\n            style: {\n              fill: '#000000A6',\n              fontSize: 10,\n            },\n          },\n          size: 10,\n          style: {\n            fill: '#00FFFF',\n            stroke: '#002222',\n          },\n        },\n      })\n\n      graph.on('node:click', onNodeClick)\n\n      graph.data({ nodes, edges })\n    }\n\n    graph.render()\n  })\n\n  return <div ref={ref} style={{ overflow: 'auto' }} />\n}\n","import React, { useState } from 'react'\nimport G6 from '../components/G6'\n\nfunction getEdges(nodeId: String, edges: any[]) {\n  return edges.filter((edge) => edge.source === nodeId)\n}\n\nexport default function () {\n  return (\n    <div style={{ width: '100%', height: '100%' }}>\n      <G6 />\n    </div>\n  )\n}\n","import React from 'react'\nimport RelationGraph from './pages/RelationGraph'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RelationGraph />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}