{"version":3,"sources":["components/G6.tsx","pages/RelationGraph.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["props","ref","React","useRef","graph","useEffect","G6","Graph","container","ReactDOM","findDOMNode","current","width","height","modes","default","layout","type","defaultNode","labelCfg","style","fill","fontSize","size","stroke","on","e","onNodeClick","data","render","overflow","nodes","map","node","id","custNo","name","edges","initialEdges","edge","source","sourceNo","target","targetNo","item","_cfg","App","className","RelationGraph","Boolean","window","location","hostname","match","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4z0zCAKe,WAAUA,GACvB,IAAMC,EAAMC,IAAMC,OAAO,MACrBC,EAAa,KAkDjB,OAhDAC,qBAAU,WACHD,IACHA,EAAQ,IAAIE,IAAGC,MAAM,CACnBC,UAAWC,IAASC,YAAYT,EAAIU,SACpCC,MAAO,KACPC,OAAQ,IAGRC,MAAO,CACLC,QAAS,CAAC,cAAe,gBAE3BC,OAAQ,CAENC,KAAM,UAQRC,YAAa,CACXD,KAAM,OACNE,SAAU,CACRC,MAAO,CACLC,KAAM,YACNC,SAAU,KAGdC,KAAM,GACNH,MAAO,CACLI,OAAQ,eAQRC,GAAG,cAAc,SAACC,GACtB1B,EAAM2B,aAAe3B,EAAM2B,YAAYD,MAI3CtB,EAAMwB,KAAK5B,EAAM4B,MACjBxB,EAAMyB,WACL,IAEI,yBAAK5B,IAAKA,EAAKmB,MAAO,CAAEU,SAAU,W,OC9C3C,IAAMF,EAAO,CAEXG,M,KAAoBC,KAAI,SAACC,GAAD,MAAW,CACjCC,GAAID,EAAKE,OACTC,KAAMH,EAAKG,SAGbC,MAAOC,EAAaN,KAAI,SAACO,GAAD,MAAW,CACjCC,OAAQD,EAAKE,SACbC,OAAQH,EAAKI,cAIF,aAKb,OACE,yBAAKvB,MAAO,CAAER,MAAO,OAAQC,OAAQ,SACnC,kBAACP,EAAD,CACEsB,KAAMA,EACND,YAAa,SAACD,GAA4BA,EAAEkB,KAAKC,KAAKX,Q,MCrB/CY,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN5C,IAASoB,OACP,kBAAC,IAAMyB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8fa764c9.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport ReactDOM from 'react-dom'\n// import { data } from './data';\nimport G6 from '@antv/g6'\n\nexport default function (props: { data: any; onNodeClick?: any }) {\n  const ref = React.useRef(null)\n  let graph: any = null\n\n  useEffect(() => {\n    if (!graph) {\n      graph = new G6.Graph({\n        container: ReactDOM.findDOMNode(ref.current) as HTMLElement,\n        width: 1200,\n        height: 1000,\n        // fitView: true,\n        // fitViewPadding: [10, 10, 10, 10],\n        modes: {\n          default: ['drag-canvas', 'zoom-canvas'], // 允许拖拽画布、放缩画布、拖拽节点\n        },\n        layout: {\n          // Object，可选，布局的方法及其配置项，默认为 random 布局。\n          type: 'random', // 指定为力导向布局\n          // focusNode: '2500631037',\n          // preventOverlap: true,\n          // nodeSize: 20,\n          // unitRadius: 60,\n          // strictRadial: true,\n          // nodeSize: 30        // 节点大小，用于算法中防止节点重叠时的碰撞检测。由于已经在上一节的元素配置中设置了每个节点的 size 属性，则不需要在此设置 nodeSize。\n        },\n        defaultNode: {\n          type: 'node',\n          labelCfg: {\n            style: {\n              fill: '#000000A6',\n              fontSize: 10,\n            },\n          },\n          size: 10,\n          style: {\n            stroke: '#72CC4A',\n          },\n        },\n        // defaultEdge: {\n        //   type: 'polyline',\n        // },\n      })\n\n      graph.on('node:click', (e: any) => {\n        props.onNodeClick && props.onNodeClick(e)\n      })\n    }\n\n    graph.data(props.data)\n    graph.render()\n  }, [])\n\n  return <div ref={ref} style={{ overflow: 'auto' }} />\n}\n","import React from 'react'\nimport G6 from '../components/G6'\nimport initialEdges from './edges.json'\nimport initialNodes from './nodes.json'\n\nfunction getNeighbor(nodeId: String, edges: any[]) {\n  return edges\n    .filter((edge) => edge.source === nodeId)\n    .map((edge) => edge.target)\n}\n\nconst data = {\n  // 点集\n  nodes: initialNodes.map((node) => ({\n    id: node.custNo,\n    name: node.name,\n  })),\n  // 边集\n  edges: initialEdges.map((edge) => ({\n    source: edge.sourceNo,\n    target: edge.targetNo,\n  })),\n}\n\nexport default function () {\n  const nodeClickHandler = (id: any) => {\n    let { nodes, edges } = data\n  }\n\n  return (\n    <div style={{ width: '100%', height: '100%' }}>\n      <G6\n        data={data}\n        onNodeClick={(e: any) => nodeClickHandler(e.item._cfg.id)}\n      />\n    </div>\n  )\n}\n","import React from 'react'\nimport RelationGraph from './pages/RelationGraph'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RelationGraph />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}